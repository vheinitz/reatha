Reatha specification draft
Copyright 2013, Valentin Heinitz
vheinitz@googlemail.com, http://heinitz-it.de

Target
======
The intent of the project is development of software for remote-monitoring of any kind of devices connected to the internet.

Preface
====
In many situations it is important to get information from or configurate a device located in a distanced place.
Think about e.g. webservers sending e-mail alerts on failures and providing remote accessed to the authorised persons.
While in web-technology related domains this scenarios are obvious, there are still many industries not usig the internet as the communication channel
or using it only for high-price products. The later are e.g. home-automation system or high-end cars.

Imagine, you distribute machines, which require maintanance. E.g. you run public photo automats in some shopping centers.
As you pay for the area, where they are installed, you may be interested in maximized return of investment. 
You may send an employee once a day to check the stock of photo-paper, to get coins, to refill change-coins, to observe damages and so on.
Or you can extend the photo automat with additional hardware able to provide this information via the internet.
One way for doing this, would be implementing an "embedded web-server" in the device and accessing the sensors (e.g paper-empty sensor) via GCI.
This approach was popular some time around 2000 and produced "embedded web-server" hype in the industry. However, for security reasons, 
dynamic IP-Address accessibility, proxy/firewall/port-forwarding configuration issues, and the internet-costs such solutions worked only at exibitions.

The Idea
========
Nowadays, low prices for webhosting, mobile 3G connections and excellent web-development frameworks allow another approach. A webserver in the internet should act as data-storage and 
central access point for the maintanance personell. The devices could send (upload) their status information as well as other data via http(s) protocol.
This way, the devices may be located behind proxy servers or firewalls. Monitoring them requires no incoming connection. 
Thus, minimizing security-threats and configuration-effort. 
This is the approach taken by Reatha project.
The idea is not new. Many applications work same way, e.g. TeamViewer, WhatsApp, splunk, etc.
The only problem with that is, the possibly sensitive data is stored (at least temporarily) on a third party server. The major internet-players 
make a big deal promoting cloud-storaging. Though they are pretty successfull in selling the loose control on your data as the state of the art in IT, some
companies may be not comfortable with this.
Reatha should address both deployment scenarious, depending on the sensivity of the data. The server part could be installed on users's webserver, so the user had complete controll over the data, 
monitored devices as well as persons having access to the devices.
Another scenario is, the user may relay on already installed infrastructure, e.g. reatha.de, registers her devices there.

The reatha-project consists of 3 main parts:
1. Software (and hrdware) used by devices for uploading data. In most cases the device will use a library implementing secure connection, data upload, 
instructions retrieval.
2. Server-side software implementing user-, device-, domain-management and data-storage
3. User-interface, which may be implemented either on the server (website, html, js) or in the client side (app, application collecting data from web-server)

Applications Scenarios
======================
A1. A single user wants to monitor and control her home during the hollidays
 Home automation system provides information on temperature, heating system, alarm-system, etc.
-Market refrigirator sends temperature data, which is recorded on the webserver. 
-Labor automates providing current process step and alarming on errors/finish-states
-Food automates provide error/empty states.
 
Features
========
F1 Connection libraries for major programming languages (device-site)
F1.1 Life-Check 
F1.2 Configurable upload periods
F2 Test-client (device-site)
F3 User management
F3.1 Language configuren by user
F4 Device management
F5 Nonification management
F5.1 Notification sent on variable-value condition
F5.2 Notification sent on variable-timestamp condition
F5.3 Configurable notification message (variables-list, etc.)
F5.4 Configurable notification channel e-mail, sms, etc.
F5.5 Configurable notification modes: instantly, bulk-mode 
F6 Domain-management
F7 Customisable views per User, Domain, Device
F8 Various data types
F8.1 Scalar values 
F8.2 History values stored within defined time-range
F8.3 Images, thumbnail
F8.4 Log-files
F10 Easy deployment
 
Use-cases
=========
1. User registers and on the login-site providing name, password and e-mail.
1.1 User receives e-mail with license and data for completion of the registration
1.2 User confirms registration by clicking the web-link in e-mail
1.3 User may input additional data like phone number

2 User logs in providing user-name and password.

3 User manages domains
3.1 User creates new domain 
3.2 User changes domain properties
3.2.1 Assign users to domain
3.2.2 Remove users from domain
3.2.3 Assign devices to domain
3.2.4 Remove devices from domain

Data-Pool
=========
Main part of the system is the data-pool - a list of process-variables which are updated by the device and monitored by the client.
Each device has one data-pool vontaining many data-items
Each data-item consists of
 1) ID - unique name (within device context) identifying the item. Allowed format: [a-zA-Z][0-9a-zA-Z_.]*
 2) Timestamp - unix time stmap of the last change in local time of the server.
 3) Value - string duck-type value
NOTE! In future the structure may be changed.  
      E.g. for performance reasons stronger typing may be specified allowing to store values of different types in separate tables,
	  value-constraints, update-time constraints could be added etc. 
	  However, for the pilot-phase this simple structure it's OK.

I'd suggest the implementation structure in DB as following:
Table DeviceData
	DeviceID, DataItemID, Timestamp, Value
	
Communication protocol
======================
The device updates its data-pool by pushing its values (get or post).
The request should contain
 1) Device's UID
 2) One or more key-value pairs <ID>=<Value>
Example: http://reatha.de/rm/update.php?UID=4711E3F8J6VFJ35F9GJU&status=ok&temperature=6&door=closed

Testing tith Test Client
------------------------
In current test-client implementation only one key-value pair can be sent. The placeholders in URL %1,%2,%3
correspond to UID, key,value respectively. e.g:http://reatha.de/rm/update.php?UID=%1&%2=%3
Script section contains instruction (one per line) for updating value automatically. The format is:
<variable>;<update time in ms>;<1st value>;<2nd value>[;<3rd value>]
E.G:
temperature;1000;10;20;30;40;30;20
This line would update temperature variable each second increasing from 10 to 40 and back to 10
At least two values are required.